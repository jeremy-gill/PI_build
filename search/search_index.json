{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PI_build Docs PI_build contains tools to automatically maintain version info for python software packages that are kept in git repositories. This project predominantly exists to aid in packaging MicroView but may be useful for other purposes as well. Tag projects with names that look like vA.B.C , and PI_build can be used to automatically populate version strings elsewhere. This package depends primarily on dulwhich , which is used to directly query software repositories. Quick Links Changelog Installation Usage","title":"Overview"},{"location":"#pi_build-docs","text":"PI_build contains tools to automatically maintain version info for python software packages that are kept in git repositories. This project predominantly exists to aid in packaging MicroView but may be useful for other purposes as well. Tag projects with names that look like vA.B.C , and PI_build can be used to automatically populate version strings elsewhere. This package depends primarily on dulwhich , which is used to directly query software repositories.","title":"PI_build Docs"},{"location":"#quick-links","text":"Changelog Installation Usage","title":"Quick Links"},{"location":"changelog/","text":"Changelog 2019-03-01: PI_utils 0.1.4 Switched to mkdocs for documentation, released on github and added travis support","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#2019-03-01-pi_utils-014","text":"Switched to mkdocs for documentation, released on github and added travis support","title":"2019-03-01: PI_utils 0.1.4"},{"location":"install/","text":"Installation From source: python setup.py install Using pip: pip install -r requirements.txt","title":"Installation"},{"location":"install/#installation","text":"From source: python setup.py install Using pip: pip install -r requirements.txt","title":"Installation"},{"location":"usage/","text":"Usage An example setup.py file is listed below for demonstration purposes: from distutils.core import setup from PI_build import build_tools # get the directory where our :file:``setup.py`` is _dir = os . path . dirname ( __file__ ) # get version info for this project info = build_tools . get_version_strings ( _dir ) # We ll use the contents of PI_build to put version strings in __init__.py f = open ( os . path . join ( PI , recon , __init__.py ), wt ) f . write ( PACKAGE_SHA1= %s \\n % info . PACKAGE_SHA1 ) f . write ( PACKAGE_VERSION= %s \\n % info . VERSION ) f . close () # Here we use the library to create appropriate Windows resource files for filename in glob . glob ( os . path . join ( Windows , *.rc.in )): s = open ( filename , rb ) . read () % info . get_dictionary () f = open ( filename . replace ( .in , ), wb ) f . write ( s ) f . close () setup ( name = MY PROJECT , version = info . VERSION , packages = mypackage , )","title":"Usage"},{"location":"usage/#usage","text":"An example setup.py file is listed below for demonstration purposes: from distutils.core import setup from PI_build import build_tools # get the directory where our :file:``setup.py`` is _dir = os . path . dirname ( __file__ ) # get version info for this project info = build_tools . get_version_strings ( _dir ) # We ll use the contents of PI_build to put version strings in __init__.py f = open ( os . path . join ( PI , recon , __init__.py ), wt ) f . write ( PACKAGE_SHA1= %s \\n % info . PACKAGE_SHA1 ) f . write ( PACKAGE_VERSION= %s \\n % info . VERSION ) f . close () # Here we use the library to create appropriate Windows resource files for filename in glob . glob ( os . path . join ( Windows , *.rc.in )): s = open ( filename , rb ) . read () % info . get_dictionary () f = open ( filename . replace ( .in , ), wb ) f . write ( s ) f . close () setup ( name = MY PROJECT , version = info . VERSION , packages = mypackage , )","title":"Usage"}]}